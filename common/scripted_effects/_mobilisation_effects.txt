### Mobilisation Effects
### Written by ~mw~
#
# How to use:
#
#	increase_mobilisation = yes
#


increase_mobilisation = {
	if = {
		limit = {
			has_idea = war_economy
		}
		swap_ideas = {
			remove_idea = war_economy
			add_idea = tot_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = partial_economic_mobilisation
			add_idea = war_economy
		}
	}
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = low_economic_mobilisation
			add_idea = partial_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = civilian_economy
		}
		swap_ideas = {
			remove_idea = civilian_economy
			add_idea = low_economic_mobilisation
		}
	}
}

decrease_mobilisation = {
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = low_economic_mobilisation
			add_idea = civilian_economy
		}
	}
	if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = partial_economic_mobilisation
			add_idea = low_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = war_economy
		}
		swap_ideas = {
			remove_idea = war_economy
			add_idea = partial_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = tot_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = tot_economic_mobilisation
			add_idea = war_economy
		}
	}
}

disband_units_setup = {
	set_temp_variable = { disband_country = THIS }
	random_state = {
		limit = {
			impassable = yes
			is_fully_controlled_by = owner
		}
		set_temp_variable = { disband_state = THIS }
		set_temp_variable = { disband_state_owner = THIS.owner }
		if = {
			limit = { NOT = { country_exists = XXA } }
			XXA = {
				transfer_state = PREV
				set_temp_variable = { debug_tag_instance = THIS }
				set_temp_variable = { old_manpower = manpower_k }
			}
		}
		else = {
			create_dynamic_country = {
				original_tag = XXA

				transfer_state = PREV
				set_temp_variable = { debug_tag_instance = THIS }
				set_temp_variable = { old_manpower = manpower_k }
			}
		}
	}
}

disband_units_transfer_manpower = {
	delete_unit = { disband = yes }

	set_temp_variable = { manpower_diff = manpower_k }
	subtract_from_temp_variable = { manpower_diff = old_manpower }

	while_loop_effect = { #avoid overflows
		limit = { check_variable = { manpower_diff > 100 } }
		subtract_from_temp_variable = { manpower_diff = 100 }
		var:disband_country = { add_manpower = 100000 }
		add_manpower = -100000
	}

	multiply_temp_variable = { manpower_diff = 1000 }
	var:disband_country = { add_manpower = PREV.manpower_diff }

	multiply_temp_variable = { manpower_diff = -1 }
	add_manpower = manpower_diff
}

disband_units_finalise = {
	var:disband_state = { transfer_state_to = var:disband_state_owner }
}


disband_ten_percent_units = {
	custom_effect_tooltip = disband_ten_percent_units
	hidden_effect = {
		disband_units_setup = yes
		transfer_units_fraction = {
			target = var:debug_tag_instance
			size = 0
			army_ratio = 0.1
			keep_unit_leaders_trigger = {
				always = yes
			}
		}
		var:debug_tag_instance = {
			disband_units_transfer_manpower = yes
			send_equipment_fraction = { target = var:disband_country value = 1 }
		}
		disband_units_finalise = yes
	}
}


disband_twenty_percent_units = {
	custom_effect_tooltip = disband_twenty_percent_units
	hidden_effect = {
		disband_units_setup = yes
		transfer_units_fraction = {
			target = var:debug_tag_instance
			size = 0
			army_ratio = 0.2
			keep_unit_leaders_trigger = {
				always = yes
			}
		}
		var:debug_tag_instance = {
			disband_units_transfer_manpower = yes
			send_equipment_fraction = { target = var:disband_country value = 1 }
		}
		disband_units_finalise = yes
	}
}

disband_twenty_percent_units_delete_equipment = { #used for disarming countries in peace events
	custom_effect_tooltip = disband_twenty_percent_units_delete_equipment
	hidden_effect = {
		disband_units_setup = yes
		transfer_units_fraction = {
			target = var:debug_tag_instance
			size = 0
			army_ratio = 0.2
			keep_unit_leaders_trigger = {
				always = yes
			}
		}
		var:debug_tag_instance = {
			disband_units_transfer_manpower = yes
			set_equipment_fraction = 0
		}
		disband_units_finalise = yes
	}
}

disband_fifty_percent_units = {
	custom_effect_tooltip = disband_fifty_percent_units
	hidden_effect = {
		disband_units_setup = yes
		transfer_units_fraction = {
			target = var:debug_tag_instance
			size = 0
			army_ratio = 0.5
			keep_unit_leaders_trigger = {
				always = yes
			}
		}
		var:debug_tag_instance = {
			disband_units_transfer_manpower = yes
			send_equipment_fraction = { target = var:disband_country value = 1 }
		}
		disband_units_finalise = yes
	}
}


calculate_maximum_divisions = {
	# base upper division limit = number of factories
	set_variable = { net_factory_count = num_of_factories } #NOTE: doing this separately for the player-facing tooltip
	set_variable = { max_divisions = net_factory_count }
	
	# base lower division limit is either max manpower/35 (for countries with very high manpower but low factories)
	# or the number of owned states or 5, whichever of the three numbers is higher
	set_variable = { lower_limit_from_manpower = max_available_manpower_k }
	divide_variable = { lower_limit_from_manpower = 35 }
	round_variable = lower_limit_from_manpower
	set_variable = { lower_limit_from_states = num_owned_states }
	
	set_variable = { lower_limit = lower_limit_from_manpower }
	clamp_variable = {
		var = lower_limit
		min = lower_limit_from_states
		max = 1000
	}
	clamp_variable = {
		var = lower_limit
		min = 5
		max = 1000
	}
	
	# +15% for majors
	if = {
		limit = { is_major = yes }
		multiply_variable = { max_divisions = 1.15 }
	}
	# +15% for ACW factions
	if = {
		limit = { ACW_in_progress = yes }
		multiply_variable = { max_divisions = 1.20 }
	}
	# +5% if WT is 70% or higher
	if = {
		limit = { threat > 0.69 }
		multiply_variable = { max_divisions = 1.05 }
	}
	if = {
		limit = { is_faction_leader = yes }
		multiply_variable = { max_divisions = 1.15 }
	}

	# the upper and lower limit is then adjusted according to the economy law, overriding the base
	set_variable = { upper_limit_from_factory_mult = modifier@unit_limit_factory_bonus }
	multiply_variable = { upper_limit_from_factory_mult = 100 }

	# +10% per economy law level above civilian economy
	set_temp_variable = { economy_mult = 1 }
	add_to_temp_variable = { economy_mult = modifier@unit_limit_factory_bonus }
	multiply_variable = { max_divisions = economy_mult }

	set_variable = { net_max_divisions = max_divisions }
	round_variable = net_max_divisions
	set_variable = { upper_limit = modifier@unit_limit_max }
	if = {
		limit = { check_variable = { lower_limit > upper_limit } }
		set_variable = { max_divisions = upper_limit }
	}
	else = {
		clamp_variable = {
			var = max_divisions
			min = lower_limit
			max = upper_limit
		}
	}

	# add any specific bonuses to the limit
	set_variable = { upper_limit_unit_bonus = modifier@unit_limit_bonus }
	add_to_variable = { max_divisions = upper_limit_unit_bonus }

	round_variable = max_divisions
}

calculate_mobilisation_penalty = {
	set_variable = { mobilisation_penalty_var = num_divisions }
	divide_variable = { mobilisation_penalty_var = max_divisions }
	subtract_from_variable = { mobilisation_penalty_var = 1 }

	divide_variable = { mobilisation_penalty_var = 4 }
	clamp_variable = {
		var = mobilisation_penalty_var
		min = -0.25
		max = 0.25
	}

	set_variable = { mobilisation_penalty_var_positive = mobilisation_penalty_var }

	#for negative effects
	multiply_variable = { mobilisation_penalty_var = -1 }
}

